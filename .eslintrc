{
	"parser": "babel-eslint",

	"env": {
		"browser": true,
		"node": true,
		"es6": true,
		"mocha": true
	},

	"ecmaFeatures": {
		"jsx": true,
	},

	"plugins": [
		"eslint-plugin-react",
		"eslint-plugin-babel"
	],

	// To give you an idea how to override rule options:
	"rules": {
		// errors
		"comma-dangle": 0, // disallow or enforce trailing commas
		"no-cond-assign": [2, "always"], // disallow assignment in conditional expressions
		"no-console": 1, // disallow use of console (off by default in the node environment)
		"no-constant-condition": 0, // disallow use of constant expressions in conditions
		"no-control-regex": 1, // disallow control characters in regular expressions
		"no-debugger": 1, // disallow use of debugger
		"no-dupe-args": 2, // disallow duplicate arguments in functions
		"no-dupe-keys": 2, // disallow duplicate keys when creating object literals
		"no-duplicate-case": 2, // disallow a duplicate case label.
		"no-empty-character-class": 1, // disallow the use of empty character classes in regular expressions
		"no-empty": 1, // disallow empty statements
		"no-ex-assign": 2, // disallow assigning to the exception in a catch block
		"no-extra-boolean-cast": 1, // disallow double-negation boolean casts in a boolean context
		"no-extra-parens": 1, // disallow unnecessary parentheses (off by default)
		"no-extra-semi": 1, // disallow unnecessary semicolons
		"no-func-assign": 2, // disallow overwriting functions written as function declarations
		"no-inner-declarations": 2, // disallow function or variable declarations in nested blocks
		"no-invalid-regexp": 2, // disallow invalid regular expression strings in the RegExp constructor
		"no-irregular-whitespace": 1, // disallow irregular whitespace outside of strings and comments
		"no-negated-in-lhs": 2, // disallow negation of the left operand of an in expression
		"no-obj-calls": 2, // disallow the use of object properties of the global object (Math and JSON) as functions
		"no-regex-spaces": 1, // disallow multiple spaces in a regular expression literal
		"no-reserved-keys": 0, // disallow reserved words being used as object literal keys (off by default)
		"no-sparse-arrays": 1, // disallow sparse arrays
		"no-unexpected-multiline": 2, // Avoid code that looks like two expressions but is actually one
		"no-unreachable": 2, // disallow unreachable statements after a return, throw, continue, or break statement
		"use-isnan": 2, // disallow comparisons with the value NaN
		"valid-jsdoc": 0, // Ensure JSDoc comments are valid (off by default)
		"valid-typeof": 2, // Ensure that the results of typeof are compared against a valid string

		// best practices
		"accessor-pairs": 0, // Enforces getter/setter pairs in objects (off by default)
		"block-scoped-var": 0, // treat var statements as if they were block scoped (off by default)
		"complexity": 0, // specify the maximum cyclomatic complexity allowed in a program (off by default)
		"consistent-return": 2, // require return statements to either always or never specify values
		"curly": [1, "all"], // specify curly brace conventions for all control statements
		"default-case": 0, // require default case in switch statements (off by default)
		"dot-notation": [2, {"allowKeywords": true, "allowPattern": ""}], // encourages use of dot notation whenever possible
		"dot-location": [0, "property"], // enforces consistent newlines before or after dots (off by default)
		"eqeqeq": [2, "allow-null"], // require the use of === and !==
		"guard-for-in": 2, // make sure for-in loops have an if statement (off by default)
		"no-alert": 1, // disallow the use of alert, confirm, and prompt
		"no-caller": 2, // disallow use of arguments.caller or arguments.callee
		"no-case-declarations": 1, // disallow lexical declarations in case clauses
		"no-div-regex": 0, // disallow division operators explicitly at beginning of regular expression (off by default)
		"no-else-return": 0, // disallow else after a return in an if (off by default)
		"no-empty-label": 0, // disallow use of labels for anything other then loops and switches
		"no-empty-pattern ": 0, // disallow use of empty destructuring patterns
		"no-eq-null": 0, // disallow comparisons to null without a type-checking operator (off by default)
		"no-eval": 2, // disallow use of eval()
		"no-extend-native": 2, // disallow adding to native types
		"no-extra-bind": 1, // disallow unnecessary function binding
		"no-fallthrough": 2, // disallow fallthrough of case statements
		"no-floating-decimal": 1, // disallow the use of leading or trailing decimal points in numeric literals (off by default)
		"no-implicit-coercion": 0, // disallow the type conversions with shorter notations
		"no-implied-eval": 2, // disallow use of eval()-like methods
		"no-invalid-this": 0, // disallow this keywords outside of classes or class-like objects
		"no-iterator": 1, // disallow usage of __iterator__ property
		"no-labels": 2, // disallow use of labeled statements
		"no-lone-blocks": 2, // disallow unnecessary nested blocks
		"no-loop-func": 2, // disallow creation of functions within loops
		"no-magic-numbers": [1, {"ignore": [-1, -0.5, 0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}], // disallow the use of magic numbers
		"no-multi-spaces": 1, // disallow use of multiple spaces
		"no-multi-str": 2, // disallow use of multiline strings
		"no-native-reassign": 2, // disallow reassignments of native objects
		"no-new-func": 2, // disallow use of new operator for Function object
		"no-new-wrappers": 2, // disallows creating new instances of String,Number, and Boolean
		"no-new": 2, // disallow use of new operator when not part of the assignment or comparison
		"no-octal-escape": 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
		"no-octal": 2, // disallow use of octal literals
		"no-param-reassign": 2, // disallow reassignment of function parameters (off by default)
		"no-process-env": 0, // disallow use of process.env (off by default)
		"no-proto": 0, // disallow usage of __proto__ property
		"no-redeclare": 2, // disallow declaring the same variable more then once
		"no-return-assign": 2, // disallow use of assignment in return statement
		"no-script-url": 2, // disallow use of javascript: urls.
		"no-self-compare": 0, // disallow comparisons where both sides are exactly the same (off by default)
		"no-sequences": 2, // disallow use of comma operator
		"no-throw-literal": 2, // restrict what can be thrown as an exception (off by default)
		"no-unused-expressions": 1, // disallow usage of expressions in statement position
		"no-useless-call": 0, // disallow unnecessary .call() and .apply()
		"no-useless-concat": 0, // disallow unnecessary concatenation of literals or template literals
		"no-void": 0, // disallow use of void operator (off by default)
		"no-warning-comments": [1, { "terms": ["todo", "fixme", "debug"], "location": "anywhere" }], // disallow usage of configurable warning terms in comments": , // e.g. TODO or FIXME (off by default)
		"no-with": 2, // disallow use of the with statement
		"radix": 1, // require use of the second argument for parseInt() (off by default)
		"vars-on-top": 1, // requires to declare all vars on top of their containing scope (off by default)
		"wrap-iife": 0, // require immediate function invocation to be wrapped in parentheses (off by default)
		"yoda": 1, // require or disallow Yoda conditions

		// strict mode
		"strict": [2, "never"],

		// variables
		"init-declarations": 0, // enforce or disallow variable initializations at definition
		"no-catch-shadow": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
		"no-delete-var": 2, // disallow deletion of variables
		"no-label-var": 0, // disallow labels that share a name with a variable
		"no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
		"no-shadow": 1, // disallow declaration of variables already declared in the outer scope
		"no-undef-init": 2, // disallow use of undefined when initializing variables
		"no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block
		"no-undefined": 0, // disallow use of undefined variable (off by default)
		"no-unused-vars": [1, {"vars": "local", "args": "after-used"}], // disallow declaration of variables that are not used in the code
		"no-use-before-define": [2, "nofunc"], // disallow use of variables before they are defined

		// node.js
		"callback-return": 0, // enforce return after a callback
		"global-require": 1, // disallow require() outside of the top-level module scope
		"handle-callback-err": [1, "^.*(e|E)rr" ], // enforces error handling in callbacks (off by default) (on by default in the node environment)
		"no-mixed-requires": 0, // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
		"no-new-require": 2, // disallow use of new operator with the require function (off by default) (on by default in the node environment)
		"no-path-concat": 2, // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
		"no-process-exit": 2, // disallow process.exit() (on by default in the node environment)
		"no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
		"no-sync": 0, // disallow use of synchronous methods (off by default)

		// stylistic issues
		"array-bracket-spacing": [1, "never"], // enforce spacing inside array brackets
		"block-spacing": [1, "always"], // disallow or enforce spaces inside of single line blocks
		"brace-style": [1, "1tbs", { "allowSingleLine": true }], // enforce one true brace style (off by default)
		"camelcase": [1, {"properties": "always"}], // require camel case names
		"comma-spacing": [1, {"before": false, "after": true}], // enforce spacing before and after comma
		"comma-style": [1, "last"], // enforce one true comma style (off by default)
		"computed-property-spacing": [1, "never"], // require or disallow padding inside computed properties
		"consistent-this": 0, // enforces consistent naming when capturing the current execution context (off by default)
		"object-curly-spacing": 0, // [1, "never"],
		"eol-last": 0, // enforce newline at the end of file, with no multiple empty lines
		"func-names": 0, // require function expressions to have a name (off by default)
		"func-style": 0, // enforces use of function declarations or expressions (off by default)
		"id-length": 0, // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
		"id-match": 0, // require identifiers to match the provided regular expression
		"indent": 0, // this option sets a specific tab width for your code (off by default)
		"jsx-quotes": [1, "prefer-double"], // specify whether double or single quotes should be used in JSX attributes
		"key-spacing": [1, {"beforeColon": false, "afterColon": true}], // enforces spacing between keys and values in object literal properties
		"linebreak-style": 0, // disallow mixed 'LF' and 'CRLF' as linebreaks (off by default)
		"lines-around-comment": [0, {"beforeBlockComment": true, "afterBlockComment": false, "beforeLineComment": true, "afterLineComment": false, "allowBlockStart": true, "allowBlockEnd": true}], // enforces empty lines around comments (off by default)
		"max-nested-callbacks": 0, // specify the maximum depth callbacks can be nested (off by default)
		"new-cap": 1, // require a capital letter for constructors
		"new-parens": 1, // disallow the omission of parentheses when invoking a constructor with no arguments
		"newline-after-var": [1, "always"], // allow/disallow an empty newline after var statement (off by default)
		"no-array-constructor": 1, // disallow use of the Array constructor
		"no-continue": 0, // disallow use of the continue statement (off by default)
		"no-inline-comments": 0, // disallow comments inline after code (off by default)
		"no-lonely-if": 1, // disallow if as the only statement in an else block (off by default)
		"no-mixed-spaces-and-tabs": 1, // disallow mixed spaces and tabs for indentation
		"no-multiple-empty-lines": [1, {"max": 3}], // disallow multiple empty lines (off by default)
		"no-nested-ternary": 0, // disallow nested ternary expressions (off by default)
		"no-new-object": 1, // disallow use of the Object constructor
		"no-restricted-syntax": 0, // disallow use of certain syntax in code
		"no-spaced-func": 1, // disallow space between function identifier and application
		"no-ternary": 0, // disallow the use of ternary operators (off by default)
		"no-trailing-spaces": 0, // disallow trailing whitespace at the end of lines
		"no-underscore-dangle": 0, // disallow dangling underscores in identifiers
		"no-unneeded-ternary": 1, // disallow the use of Boolean literals in conditional expressions (off by default)
		"one-var": [0, "never"], // allow or disallow one variable declaration per function (off by default)
		"operator-assignment": [1, "always"], // require assignment operator shorthand where possible or prohibit it entirely (off by default)
		"operator-linebreak": [1, "after"], // enforce operators to be placed before or after line breaks (off by default)
		"padded-blocks": 0, // enforce padding within blocks (off by default)
		"quote-props": 0, // require quotes around object literal property names (off by default)
		"quotes": [1, "single"], // specify whether backticks, double or single quotes should be used
		"require-jsdoc": 0, // Require JSDoc comment
		"semi-spacing": 0, // enforce spacing before and after semicolons
		"semi": [2, "always"], // require or disallow use of semicolons instead of ASI
		"sort-vars": 0, // sort variables within the same declaration block (off by default)
		"space-after-keywords": [1, "always"], // require a space after certain keywords (off by default)
		"space-before-keywords": [1, "always"], // require a space before certain keywords (fixable)
		"space-before-blocks": [1, "always"], // require or disallow space before blocks (off by default)
		"space-before-function-paren": [1, {"anonymous": "always", "named": "never"}], // require or disallow space before function opening parenthesis (off by default)
		"space-in-parens": [1, "never"], // require or disallow spaces inside parentheses (off by default)
		"space-infix-ops": [1, {"int32Hint": true}], // require spaces around operators
		"space-return-throw-case": 1, // require a space after return, throw, and case
		"space-unary-ops": [1, { "words": true, "nonwords": false }], // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
		"spaced-comment": [0, "always", { "exceptions": ["*"] }], // require or disallow a space immediately following the // or /* in a comment
		"spaced-line-comment": 0, // require or disallow a space immediately following the // in a line comment (off by default)
		"wrap-regex": 0, // require regex literals to be wrapped in parentheses (off by default)

		// es6
		"arrow-body-style": [1, "as-needed"], // require braces in arrow function body
		"generator-star-spacing": 0,// [1, "after"], // enforce the spacing around the * in generator functions (off by default)
		"no-var": 0, // require let or const instead of var (off by default)
		"object-shorthand": 0, // [1, "always"], // require method and property shorthand syntax for object literals (off by default)
    "arrow-parens": 0, // [1, "always"], // require parens in arrow function arguments
    "arrow-spacing": [1, { "before": true, "after": true }], // require space before/after arrow function's arrow
    "constructor-super": 2, // verify calls of super() in constructors
    "generator-star-spacing": [2, {"before": false, "after": true}], // enforce spacing around the * in generator functions
    "no-arrow-condition": 0, // disallow arrow functions where a condition is expected
    "no-class-assign": 2, // disallow modifying variables of class declarations
    "no-const-assign": 2, // disallow modifying variables that are declared using const
    "no-dupe-class-members": 2, // disallow duplicate name in class members
    "no-this-before-super": 2, // disallow use of this/super before calling super() in constructors.
    "no-var": 0, // require let or const instead of var
    "object-shorthand": 1, // require method and property shorthand syntax for object literals
    "prefer-arrow-callback": 1, // suggest using arrow functions as callbacks
    "prefer-const": 0, // suggest using const declaration for variables that are never modified after declared
    "prefer-spread": 1, // suggest using the spread operator instead of .apply().
    "prefer-reflect": 0, // suggest using Reflect methods where applicable
    "prefer-template": 0, // suggest using template literals instead of strings concatenation
    "require-yield": 1, // disallow generator functions that do not have yield

    "babel/generator-star-spacing": [1, "after"],
    "babel/new-cap": 0,
    "babel/object-curly-spacing": 0,
    "babel/object-shorthand": 1,
    "babel/arrow-parens": [0, "always"],
    "babel/no-await-in-loop": 1
	}
}
