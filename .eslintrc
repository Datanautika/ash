{
	"parser": "babel-eslint",

	"parserOptions": {
		"ecmaVersion": 7,
		"sourceType": "module",
		"ecmaFeatures": {
			"jsx": true,
			"impliedStrict": true
		},
	},

	"env": {
		"browser": true,
		"node": true,
		"es6": true,
		"mocha": true
	},

	"ecmaFeatures": {
		"jsx": true,
	},

	"plugins": [
		"eslint-plugin-react",
		"eslint-plugin-babel",
		// "eslint-plugin-flowtype"
	],

	"rules": {
		// possible errors
		"comma-dangle": 0, // disallow or enforce trailing commas
		"no-cond-assign": [2, "always"], // disallow assignment in conditional expressions
		"no-console": 1, // disallow use of console
		"no-constant-condition": 1, // disallow use of constant expressions in conditions
		"no-control-regex": 2, // disallow control characters in regular expressions
		"no-debugger": 1, // disallow use of debugger
		"no-dupe-args": 2, // disallow duplicate arguments in functions
		"no-dupe-keys": 2, // disallow duplicate keys when creating object literals
		"no-duplicate-case": 2, // disallow a duplicate case label.
		"no-empty-character-class": 2, // disallow the use of empty character classes in regular expressions
		"no-empty": 1, // disallow empty block statements
		"no-ex-assign": 2, // disallow assigning to the exception in a catch block
		"no-extra-boolean-cast": 1, // disallow double-negation boolean casts in a boolean context
		"no-extra-parens": 1, // disallow unnecessary parentheses
		"no-extra-semi": 1, // disallow unnecessary semicolons
		"no-func-assign": 2, // disallow overwriting functions written as function declarations
		"no-inner-declarations": 2, // disallow function or variable declarations in nested blocks
		"no-invalid-regexp": 2, // disallow invalid regular expression strings in the RegExp constructor
		"no-irregular-whitespace": 1, // disallow irregular whitespace outside of strings and comments
		"no-negated-in-lhs": 2, // disallow negation of the left operand of an in expression
		"no-obj-calls": 2, // disallow the use of object properties of the global object (Math and JSON) as functions
		"no-regex-spaces": 1, // disallow multiple spaces in a regular expression literal
		"no-sparse-arrays": 1, // disallow sparse arrays
		"no-unexpected-multiline": 1, // Avoid code that looks like two expressions but is actually one
		"no-unreachable": 1, // disallow unreachable statements after a return, throw, continue, or break statement
		"use-isnan": 2, // disallow comparisons with the value NaN
		"valid-jsdoc": 1, // ensure JSDoc comments are valid
		"valid-typeof": 2, // ensure that the results of typeof are compared against a valid string

		// best practices
		"accessor-pairs": 0, // enforces getter/setter pairs in objects
		"array-callback-return": 1, // enforces return statements in callbacks of array's methods
		"block-scoped-var": 1, // treat var statements as if they were block scoped
		"complexity": [1, 20], // specify the maximum cyclomatic complexity allowed in a program
		"consistent-return": 1, // require return statements to either always or never specify values
		"curly": [1, "all"], // specify curly brace conventions for all control statements
		"default-case": 0, // require default case in switch statements
		"dot-location": [1, "property"], // enforces consistent newlines before or after dots
		"dot-notation": [1, {"allowKeywords": true, "allowPattern": ""}], // encourages use of dot notation whenever possible
		"eqeqeq": [2, "smart"], // require the use of === and !==
		"guard-for-in": 1, // make sure for-in loops have an if statement
		"no-alert": 2, // disallow the use of alert, confirm, and prompt
		"no-caller": 2, // disallow use of arguments.caller or arguments.callee
		"no-case-declarations": 1, // disallow lexical declarations in case clauses
		"no-div-regex": 0, // disallow division operators explicitly at beginning of regular expression
		"no-else-return": 1, // disallow else after a return in an if
		"no-empty-function": 1, // disallow use of empty functions
		"no-empty-pattern": 1, // disallow use of empty destructuring patterns
		"no-eq-null": 0, // disallow comparisons to null without a type-checking operator
		"no-eval": 2, // disallow use of eval()
		"no-extend-native": 2, // disallow adding to native types
		"no-extra-bind": 1, // disallow unnecessary function binding
		"no-extra-label": 1, // disallow unnecessary labels
		"no-fallthrough": 2, // disallow fallthrough of case statements
		"no-floating-decimal": 1, // disallow the use of leading or trailing decimal points in numeric literals
		"no-implicit-coercion": 0, // disallow the type conversions with shorter notations
		"no-implicit-globals": 1, // disallow var and named functions in global scope
		"no-implied-eval": 2, // disallow use of eval()-like methods
		"no-invalid-this": 0, // disallow this keywords outside of classes or class-like objects
		"no-iterator": 2, // disallow usage of __iterator__ property
		"no-labels": 2, // disallow use of labeled statements
		"no-lone-blocks": 1, // disallow unnecessary nested blocks
		"no-loop-func": 2, // disallow creation of functions within loops
		"no-magic-numbers": [1, {"ignore": [-10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.75, -3.5, -3.25, -3, -2.75, -2.5, -2.25, -2, -1.9375, -1.875, -1.8125, -1.75, -1.6875, -1.625, -1.5625, -1.5, -1.4375, -1.375, -1.3125, -1.25, -1.1875, -1.125, -1.0625, -1, -0.9375, -0.875, -0.8125, -0.75, -0.6875, -0.625, -0.5625, -0.5, -0.4375, -0.375, -0.3125, -0.25, -0.1875, -0.125, -0.0625, 0, 0.025, 0.05, 0.0625, 0.1, 0.125, 0.1875, 0.25, 0.3125, 0.375, 0.4375, 0.5, 0.5625, 0.625, 0.6875, 0.75, 0.8125, 0.875, 0.9, 0.9375, 0.95, 0.975, 1, 1.0625, 1.125, 1.1875, 1.25, 1.3125, 1.375, 1.4375, 1.5, 1.5625, 1.625, 1.6875, 1.75, 1.8125, 1.875, 1.9375, 2, 2.25, 2.5, 2.75, 3, 3.25, 3.5, 3.75, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 255], "ignoreArrayIndexes": true}], // disallow the use of magic numbers
		"no-multi-spaces": 1, // disallow use of multiple spaces
		"no-multi-str": 2, // disallow use of multiline strings
		"no-native-reassign": 2, // disallow reassignments of native objects
		"no-new-func": 2, // disallow use of new operator for Function object
		"no-new-wrappers": 2, // disallows creating new instances of String,Number, and Boolean
		"no-new": 1, // disallow use of the new operator when not part of an assignment or comparison
		"no-octal-escape": 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
		"no-octal": 2, // disallow use of octal literals
		"no-param-reassign": [2, {"props": false}], // disallow reassignment of function parameters
		"no-process-env": 0, // disallow use of process.env
		"no-proto": 0, // disallow usage of __proto__ property
		"no-redeclare": 2, // disallow declaring the same variable more than once
		"no-return-assign": 2, // disallow use of assignment in return statement
		"no-script-url": 2, // disallow use of javascript: urls.
		"no-self-assign": 1, // disallow assignments where both sides are exactly the same
		"no-self-compare": 1, // disallow comparisons where both sides are exactly the same
		"no-sequences": 2, // disallow use of the comma operator
		"no-throw-literal": 2, // restrict what can be thrown as an exception
		"no-unmodified-loop-condition": 1, // disallow unmodified conditions of loops
		"no-unused-expressions": [2, {"allowShortCircuit": true, "allowTernary": true}], // disallow usage of expressions in statement position
		"no-unused-labels": 2, // disallow unused labels
		"no-useless-call": 0, // disallow unnecessary .call() and .apply()
		"no-useless-concat": 1, // disallow unnecessary concatenation of literals or template literals
		"no-void": 1, // disallow use of the void operator
		"no-warning-comments": [1, { "terms": ["todo", "fixme", "debug"], "location": "anywhere" }], // disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
		"no-with": 2, // disallow use of the with statement
		"radix": [2, "always"], // require use of the second argument for parseInt()
		"vars-on-top": 2, // require declaration of all vars at the top of their containing scope
		"wrap-iife": [2, "inside"], // require immediate function invocation to be wrapped in parentheses
		"yoda": 1, // require or disallow Yoda conditions

		// strict Mode
		"strict": [1, "never"], // require effective use of strict mode directives

		// variables
		"init-declarations": 0, // enforce or disallow variable initializations at definition
		"no-catch-shadow": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope
		"no-delete-var": 2, // disallow deletion of variables
		"no-label-var": 0, // disallow labels that share a name with a variable
		"no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
		"no-shadow": 1, // disallow declaration of variables already declared in the outer scope
		"no-undef-init": 0, // disallow use of undefined when initializing variables
		"no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block
		"no-undefined": 0, // disallow use of undefined variable
		"no-unused-vars": [1, {"vars": "local", "args": "after-used"}], // disallow declaration of variables that are not used in the code
		"no-use-before-define": [2, {"functions": false, "classes": true}], // disallow use of variables before they are defined

		// Node.js and CommonJS
		"callback-return": [1, ["callback", "cb"]], // enforce return after a callback
		"global-require": 0, // enforce require() on top-level module scope
		"handle-callback-err": 1, // enforce error handling in callbacks
		"no-mixed-requires": 0, // disallow mixing regular variable and require declarations
		"no-new-require": 0, // disallow use of new operator with the require function
		"no-path-concat": 1, // disallow string concatenation with __dirname and __filename
		"no-process-exit": 1, // disallow process.exit()
		"no-restricted-imports": 0, // restrict usage of specified node imports
		"no-restricted-modules": 0, // restrict usage of specified node modules
		"no-sync": 1, // disallow use of synchronous methods

		// stylistic issues
		"array-bracket-spacing": 0, // [1, "never"], // enforce spacing inside array brackets
		"block-spacing": [1, "always"], // disallow or enforce spaces inside of single line blocks
		"brace-style": [1, "1tbs", { "allowSingleLine": true }], // enforce one true brace style
		"camelcase": [1, {"properties": "always"}], // require camel case names
		"comma-spacing": [1, {"before": false, "after": true}], // enforce spacing before and after comma
		"comma-style": [1, "last"], // enforce one true comma style
		"computed-property-spacing": [1, "never"], // require or disallow padding inside computed properties
		"consistent-this": 0, // enforce consistent naming when capturing the current execution context
		"eol-last": [1, "windows"], // enforce newline at the end of file, with no multiple empty lines
		"func-names": 1, // require function expressions to have a name
		"func-style": [1, "declaration", { "allowArrowFunctions": true }], // enforce use of function declarations or expressions
		"id-length": 0, // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
		"id-match": 0, // require identifiers to match the provided regular expression
		"id-blacklist": 0, // blacklist certain identifiers to prevent them being used
		"indent": [1, "tab"], // specify tab or space width for your code
		"jsx-quotes": [1, "prefer-double"], // specify whether double or single quotes should be used in JSX attributes
		"key-spacing": [1, {"beforeColon": false, "afterColon": true}], // enforce spacing between keys and values in object literal properties
		"keyword-spacing": [1, {"before": true, "after": true}], // enforce spacing before and after keywords
		"linebreak-style": 0, // [1, "windows"], // disallow mixed 'LF' and 'CRLF' as linebreaks
		"lines-around-comment": [0, {"beforeBlockComment": true, "afterBlockComment": false, "beforeLineComment": true, "afterLineComment": false, "allowBlockStart": true, "allowBlockEnd": true}], // enforce empty lines around comments
		"max-depth": 0, // specify the maximum depth that blocks can be nested
		"max-len": 0, // specify the maximum length of a line in your program
		"max-nested-callbacks": 0, // specify the maximum depth callbacks can be nested
		"max-params": 0, // limits the number of parameters that can be used in the function declaration
		"max-statements": 0, // specify the maximum number of statement allowed in a function
		"new-cap": 0, // 1, // require a capital letter for constructors
		"new-parens": 1, // disallow the omission of parentheses when invoking a constructor with no arguments
		"newline-after-var": [1, "always"], // require or disallow an empty newline after variable declarations
		"newline-per-chained-call": 0, // enforce newline after each call when chaining the calls
		"no-array-constructor": 1, // disallow use of the Array constructor
		"no-bitwise": 0, // disallow use of bitwise operators
		"no-continue": 0, // disallow use of the continue statement
		"no-inline-comments": 0, // disallow comments inline after code
		"no-lonely-if": 1, // disallow if as the only statement in an else block
		"no-mixed-spaces-and-tabs": 1, // disallow mixed spaces and tabs for indentation
		"no-multiple-empty-lines": [1, {"max": 3}], // disallow multiple empty lines
		"no-negated-condition": 1, // disallow negated conditions
		"no-nested-ternary": 0, // disallow nested ternary expressions
		"no-new-object": 1, // disallow the use of the Object constructor
		"no-plusplus": 0, // disallow use of unary operators, ++ and --
		"no-restricted-syntax": 0, // disallow use of certain syntax in code
		"no-whitespace-before-property": 1, // disallow whitespace before properties
		"no-spaced-func": 1, // disallow space between function identifier and application
		"no-ternary": 0, // disallow the use of ternary operators
		"no-trailing-spaces": [1, { "skipBlankLines": true }], // disallow trailing whitespace at the end of lines
		"no-underscore-dangle": 0, // disallow dangling underscores in identifiers
		"no-unneeded-ternary": 1, // disallow the use of ternary operators when a simpler alternative exists
		"object-curly-spacing": 0, // [1, "never"], // require or disallow padding inside curly braces
		"one-var": [0, "never"], // require or disallow one variable declaration per function
		"one-var-declaration-per-line": [1, "always"], // require or disallow an newline around variable declarations
		"operator-assignment": [1, "always"], // require assignment operator shorthand where possible or prohibit it entirely
		"operator-linebreak": [1, "after"], // enforce operators to be placed before or after line breaks
		"padded-blocks": [1, "never"], // enforce padding within blocks
		"quote-props": [1, "as-needed"], // require quotes around object literal property names
		"quotes": [1, "single"], // specify whether backticks, double or single quotes should be used
		"require-jsdoc": [0, {"require": {"FunctionDeclaration": true, "MethodDefinition": false, "ClassDeclaration": false}}], // require JSDoc comment
		"semi-spacing": [1, {"before": false, "after": true}], // enforce spacing before and after semicolons
		"semi": [2, "always"], // require or disallow use of semicolons instead of ASI
		"sort-vars": 0, // sort variables within the same declaration block
		"sort-imports": 0, // sort import declarations within module
		"space-before-blocks": [1, "always"], // require or disallow a space before blocks
		"space-before-function-paren": [1, {"anonymous": "always", "named": "never"}], // require or disallow a space before function opening parenthesis
		"space-in-parens": [1, "never"], // require or disallow spaces inside parentheses
		"space-infix-ops": [1, {"int32Hint": true}], // require spaces around operators
		"space-unary-ops": [1, { "words": true, "nonwords": false }], // require or disallow spaces before/after unary operators
		"spaced-comment": 0, // require or disallow a space immediately following the // or /* in a comment
		"wrap-regex": 0, // require regex literals to be wrapped in parentheses

		// ECMAScript 6
		"arrow-body-style": [1, "as-needed"], // require braces in arrow function body
		"arrow-parens": 0, // [1, "always"], // require parens in arrow function arguments
		"arrow-spacing": [1, {"before": true, "after": true}], // require space before/after arrow function's arrow
		"constructor-super": 2, // verify calls of super() in constructors
		"generator-star-spacing": 0, // [1, {"before": false, "after": true}], // enforce spacing around the * in generator functions
		"no-class-assign": 2, // disallow modifying variables of class declarations
		"no-confusing-arrow": [1, {"allowParens": true}], // disallow arrow functions where they could be confused with comparisons
		"no-const-assign": 1, // disallow modifying variables that are declared using const
		"no-dupe-class-members": 2, // disallow duplicate name in class members
		"no-new-symbol": 2, // disallow use of the new operator with the Symbol object
		"no-this-before-super": 2, // disallow use of this/super before calling super() in constructors
		"no-var": 1, // require let or const instead of var
		"no-useless-constructor": 1, // disallow unnecessary constructor
		"object-shorthand": 0, // 1, // require method and property shorthand syntax for object literals
		"prefer-arrow-callback": 1, // suggest using arrow functions as callbacks
		"prefer-const": 0, // suggest using const declaration for variables that are never modified after declared
		"prefer-reflect": 0, // suggest using Reflect methods where applicable
		"prefer-rest-params": 1, // suggest using the rest parameters instead of arguments
		"prefer-spread": 1, // suggest using the spread operator instead of .apply()
		"prefer-template": 1, // suggest using template literals instead of strings concatenation
		"require-yield": 1, // disallow generator functions that do not have yield
		"template-curly-spacing": [1, "never"], // enforce spacing around embedded expressions of template strings
		"yield-star-spacing": [1, {"before": false, "after": true}], // enforce spacing around the * in yield* expressions

		"babel/generator-star-spacing": [1, "after"],
		"babel/new-cap": 0,
		"babel/array-bracket-spacing": [1, "never"],
		"babel/object-curly-spacing": [1, "never"],
		"babel/object-shorthand": 1,
		"babel/arrow-parens": [1, "always"],
		"babel/no-await-in-loop": 1,

    "react/display-name": 0, // Prevent missing displayName in a React component definition
    "react/forbid-prop-types": 0, // Forbid certain propTypes
    "react/no-danger": 0, // Prevent usage of dangerous JSX properties
    "react/no-deprecated": 0, // Prevent usage of deprecated methods
    "react/no-did-mount-set-state": 0, // Prevent usage of setState in componentDidMount
    "react/no-did-update-set-state": 0, // Prevent usage of setState in componentDidUpdate
    "react/no-direct-mutation-state": 0, // Prevent direct mutation of this.state
    "react/no-is-mounted": 0, // Prevent usage of isMounted
    "react/no-multi-comp": 0, // Prevent multiple component definition per file
    "react/no-set-state": 0, // Prevent usage of setState
    "react/no-string-refs": 0, // Prevent using string references in ref attribute.
    "react/no-unknown-property": 0, // Prevent usage of unknown DOM property (fixable)
    "react/prefer-es6-class": 0, // Enforce ES5 or ES6 class for React Components
    "react/prop-types": 0, // Prevent missing props validation in a React component definition
    "react/react-in-jsx-scope": 0, // Prevent missing React when using JSX
    "react/require-extension": 0, // Restrict file extensions that may be required
    "react/self-closing-comp": 0, // Prevent extra closing tags for components without children
    "react/sort-comp": 0, // Enforce component methods order
    "react/wrap-multilines": 0, // Prevent missing parentheses around multilines JSX (fixable)

    "react/jsx-boolean-value": [1, "always"], // Enforce boolean attributes notation in JSX (fixable)
    "react/jsx-closing-bracket-location": 0, // Validate closing bracket location in JSX
    "react/jsx-curly-spacing": [1, "never"], // Enforce or disallow spaces inside of curly braces in JSX attributes (fixable)
    // "react/jsx-equals-spacing": [1, "never"], // Enforce or disallow spaces around equal signs in JSX attributes
    "react/jsx-handler-names": 0, // Enforce event handler naming conventions in JSX
    "react/jsx-indent-props": 0, // Validate props indentation in JSX
    // "react/jsx-indent": [1, "tab"], // Validate JSX indentation
    // "react/jsx-key": 1, // Validate JSX has key prop when in array or iterator
    "react/jsx-max-props-per-line": 0, // Limit maximum of props on a single line in JSX
    // "react/jsx-no-bind": [1, {"ignoreRefs": false, "allowArrowFunctions": false, "allowBind": false}], // Prevent usage of .bind() and arrow functions in JSX props
    "react/jsx-no-duplicate-props": 1, // Prevent duplicate props in JSX
    "react/jsx-no-literals": 0, // Prevent usage of unwrapped JSX strings
    "react/jsx-no-undef": 2, // Disallow undeclared variables in JSX
    // "react/jsx-pascal-case": 1, // Enforce PascalCase for user-defined JSX components
    "react/jsx-sort-prop-types": 0, // Enforce propTypes declarations alphabetical sorting
    "react/jsx-sort-props": 0, // Enforce props alphabetical sorting
    // "react/jsx-space-before-closing": [1, "always"], // Validate spacing before closing bracket in JSX (fixable)
    "react/jsx-uses-react": 0, // Prevent React to be incorrectly marked as unused
    "react/jsx-uses-vars": 1, // Prevent variables used in JSX to be incorrectly marked as unused
	}
}
